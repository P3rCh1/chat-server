// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: rooms/rooms.proto

package roomspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rooms_Invite_FullMethodName   = "/roomspb.rooms/Invite"
	Rooms_Join_FullMethodName     = "/roomspb.rooms/Join"
	Rooms_Create_FullMethodName   = "/roomspb.rooms/Create"
	Rooms_Get_FullMethodName      = "/roomspb.rooms/Get"
	Rooms_UserIn_FullMethodName   = "/roomspb.rooms/UserIn"
	Rooms_IsMember_FullMethodName = "/roomspb.rooms/IsMember"
)

// RoomsClient is the client API for Rooms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsClient interface {
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	UserIn(ctx context.Context, in *UserInRequest, opts ...grpc.CallOption) (*UserInResponse, error)
	IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error)
}

type roomsClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsClient(cc grpc.ClientConnInterface) RoomsClient {
	return &roomsClient{cc}
}

func (c *roomsClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, Rooms_Invite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Rooms_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Rooms_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Rooms_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) UserIn(ctx context.Context, in *UserInRequest, opts ...grpc.CallOption) (*UserInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInResponse)
	err := c.cc.Invoke(ctx, Rooms_UserIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsClient) IsMember(ctx context.Context, in *IsMemberRequest, opts ...grpc.CallOption) (*IsMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsMemberResponse)
	err := c.cc.Invoke(ctx, Rooms_IsMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServer is the server API for Rooms service.
// All implementations must embed UnimplementedRoomsServer
// for forward compatibility.
type RoomsServer interface {
	Invite(context.Context, *InviteRequest) (*InviteResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	UserIn(context.Context, *UserInRequest) (*UserInResponse, error)
	IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error)
	mustEmbedUnimplementedRoomsServer()
}

// UnimplementedRoomsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomsServer struct{}

func (UnimplementedRoomsServer) Invite(context.Context, *InviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedRoomsServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedRoomsServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoomsServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoomsServer) UserIn(context.Context, *UserInRequest) (*UserInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIn not implemented")
}
func (UnimplementedRoomsServer) IsMember(context.Context, *IsMemberRequest) (*IsMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMember not implemented")
}
func (UnimplementedRoomsServer) mustEmbedUnimplementedRoomsServer() {}
func (UnimplementedRoomsServer) testEmbeddedByValue()               {}

// UnsafeRoomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServer will
// result in compilation errors.
type UnsafeRoomsServer interface {
	mustEmbedUnimplementedRoomsServer()
}

func RegisterRoomsServer(s grpc.ServiceRegistrar, srv RoomsServer) {
	// If the following call pancis, it indicates UnimplementedRoomsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rooms_ServiceDesc, srv)
}

func _Rooms_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_Invite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_UserIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).UserIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_UserIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).UserIn(ctx, req.(*UserInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rooms_IsMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServer).IsMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rooms_IsMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServer).IsMember(ctx, req.(*IsMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rooms_ServiceDesc is the grpc.ServiceDesc for Rooms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rooms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roomspb.rooms",
	HandlerType: (*RoomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _Rooms_Invite_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Rooms_Join_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Rooms_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Rooms_Get_Handler,
		},
		{
			MethodName: "UserIn",
			Handler:    _Rooms_UserIn_Handler,
		},
		{
			MethodName: "IsMember",
			Handler:    _Rooms_IsMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rooms/rooms.proto",
}
